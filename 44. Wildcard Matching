class Solution(object):
    def isMatch(self, s, p):
        print(s, '\n', p)
        """
        :type s: str
        :type p: str
        :rtype: bool
        """
        # empty pattern can only match with empty string 
        if len(s) == 0:
            if (len(p) == 0):
                return True
       
        # Merge multiple consiquitve '*' into single *
        p = re.sub(r'\*+', "*", p)
        n = len(s)
        m = len(p)
        
        # lookup table for storing results of 
        # subproblems 
        # initailze lookup table to false 
        lookup = [[False for i in range(0, m+1)] for j in range(0, n+1)]
       
        # empty pattern can match with empty string 
        lookup[0][0] = True
       
        # Only '*' can match with empty string 
        for j in range(1, m+1):
            if p[j - 1] == '*':
                lookup[0][j] = lookup[0][j - 1]
       
        #fill the table
        for i in range(1, n+1): 
            for j in range(1, m+1): 
                # There are two cases if we get a '*' 
                # a) Ignore '*'' and move to next  character in the pattern, 
                #     i.e., '*' indicates an empty sequence. 
                # b) '*' matches with ith character in input 
                if p[j - 1] == '*':
                    lookup[i][j] = lookup[i][j - 1] or lookup[i - 1][j]
                elif p[j - 1] == '?' or s[i - 1] == p[j - 1]:
                    # Current characters are considered as matching in two cases 
                    # (a) current character of pattern is '?' 
                    # (b) characters actually match 
                    lookup[i][j] = lookup[i - 1][j - 1]    
                else: # If characters don't match 
                    lookup[i][j] = False
        return lookup[n][m]
