1. Two Sum
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int>result;
        for(auto it = nums.begin();it!= nums.end();++it)
        {
            auto it2 = find(it+1,nums.end(),target - *it);
        if(it2!= nums.end()){
            result.push_back(it - nums.begin());
            result.push_back(it2 - nums.begin());
            break;
        }
        }
        return result;
    }
};

Approach Using Map

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
       unordered_map<int,int> map;
        for(int i=0;i<nums.size();i++)
        {
            int num=nums[i];
            int complement = target-num;
            auto it =map.find(complement);
            if(it!=map.end())
            {
                return{it->second,i};
            }
            map[num]=i;
        }
        return {};
    }
};
